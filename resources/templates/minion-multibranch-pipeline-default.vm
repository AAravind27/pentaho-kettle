<%
libraries.each { library ->
  println "library(identifier: '$library', changelog: false)"
}

runCheckout = properties.getBool('RUN_STAGE_CHECKOUT')
runBuild = properties.getBool('RUN_STAGE_BUILD')
runSonar = properties.getBool('RUN_STAGE_SONAR') && item.auditable
%>
Map defaultParams = [
  SLAVE_NODE_LABEL    : '$properties.SLAVE_NODE_LABEL',
  WORKSPACE           : '$properties.WORKSPACE',
  BUILD_DATA_ROOT_PATH: '$properties.BUILD_DATA_ROOT_PATH',
  BUILD_DATA_FILE     : '$properties.BUILD_DATA_FILE',

  RUN_STAGE_CHECKOUT  : $runCheckout,
  RUN_STAGE_BUILD     : $runBuild,
  RUN_STAGE_SONAR     : $runSonar,

  OVERRIDE_PARAMS     : [:],
  OVERRIDE_JOB_PARAMS : [:]
]

node(params.SLAVE_NODE_LABEL ?: defaultParams.SLAVE_NODE_LABEL) {
  timestamps {
    stages.configure(defaultParams)

    catchError {
      timeout(config.get().timeout) {
        stages.checkout()
        stages.buildAndTest()
        stages.sonar()
      }
    }

    stages.report()

    if (config.get().isPullRequest()) {
      stage('Cleanup') {
        clean.checkouts(false)
      }
    }
  }
}