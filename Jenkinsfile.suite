// This is the master top-level pipeline that triggers both the build pipeline and the downstream triggered jobs
library(identifier: "${params.LIB_NAME ?: 'pentaho-library'}@${params.LIB_VERSION ?: '20220915'}", changelog: false)

String buildJobName =  'suite-release'
Map suiteParameters
def commonJenkinsFile

node('non-master') {

  timestamps {
    catchError {
      stage('Checkout') {
        checkout scm
      }

      stage('Configure') {
        commonJenkinsFile = load 'scripts/JenkinsfileCommons.groovy'

        commonJenkinsFile.config()
        suiteParameters = commonJenkinsFile.getJobParameters(buildJobName)
      }

      if (!params.NOOP) {
        stage('Build') {
          job.trigger(buildJobName, suiteParameters)
        }

        stage("Trigger Pentaho Container Images") {
          script {
            // Any error that might come up from this block, should not compromise the execution of the subsequent stages.
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              withCredentials([string(credentialsId: 'thanos-gh-token', variable: 'GHA_TOKEN')]) {
                def script2Run = """curl -L \
                    -X POST \
                    -H 'Accept: application/vnd.github+json' \
                    -H 'Authorization: Bearer ${GHA_TOKEN}'\
                    -H 'X-GitHub-Api-Version: 2022-11-28' \
                    https://api.github.com/repos/pentaho/pentaho-container-images-ee/actions/workflows/build-all-products.yaml/dispatches \
                    -d '{"ref":"master","inputs":{"qat_triggered":"true","pentaho_release_version":"${suiteParameters.RELEASE_VERSION}","pentaho_build_number":"${suiteParameters.RELEASE_BUILD_NUMBER}"}}'
                """
                def response = sh(script: script2Run, returnStdout: true).trim()
                echo response
              }
            }
          }
        }
        stage('Deployment') {
          parallel(
            'deployment-sculptor': {
              job.trigger('deployment-sculptor', suiteParameters)
            },
            'deploy-build-info': {
              job.trigger('deploy-build-info', suiteParameters)
            }
          )
        }

        stage('Validations / Triggers') {
          parallel(
            'github-commits': {
              job.trigger('engops/github-commits', suiteParameters, false)
            },
            'remote-ip-job-trigger': {
              job.trigger('engops/remote-ip-job-trigger', suiteParameters, false)
            },
            'regression-smoketest-job-trigger': {
              job.trigger('engops/regression-smoketest-job-trigger', suiteParameters, false)
            },
            'remote-qa-automation-trigger': {
              job.trigger('engops/remote-qa-automation-trigger', suiteParameters, false)
            },
            'snapshot-checker': {
              job.trigger('snapshot-checker', suiteParameters, false)
            },
            'obfuscation-verifier': {
              job.trigger('obfuscation-verifier', suiteParameters, false)
            }
          )
        }

        if (params.BUILD_SERVICEPACK) {
          stage('Service Pack') {
            stage('Aggregation Designer') {
              job.trigger('service-pack-installers-aggregation-designer', suiteParameters)
            }
            stage('Pentaho Server') {
              job.trigger('service-pack-installers-pentaho-server', suiteParameters)
            }
            stage('DI Client') {
              job.trigger('service-pack-installers-di-client', suiteParameters)
            }
            stage('Metadata Editor') {
              job.trigger('service-pack-installers-metadata-editor', suiteParameters)
            }
            stage('Report Designer') {
              job.trigger('service-pack-installers-report-designer', suiteParameters)
            }
            stage('Schema Workbench') {
              job.trigger('service-pack-installers-schema-workbench', suiteParameters)
            }
            stage('Platform Installer Bundler') {
              job.trigger('service-pack-platform-installer-bundler', suiteParameters)
            }

            stage('Deployment (SP)') {
              job.trigger('deployment-sculptor-sp', suiteParameters)
            }
          }
        }
        
        if (params.BUILD_UPGRADE_PATH && !params.NOOP) {
          stage('Upgrade Path') {
            job.trigger('upgrade-path-pentaho-server', suiteParameters)
          }

          stage('Deployment (UP)') {
            job.trigger('deployment-sculptor-sp', suiteParameters)
          }
        }
      }
    }
    
    commonJenkinsFile.notifyBuildResult(currentBuild.result)
  }
}


