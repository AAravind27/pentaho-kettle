// This is the master top-level pipeline that triggers both the build pipeline and the downstream triggered jobs

String jobParentFolder = params.JENKINS_FOLDER_NAME ?: "9.0"

String releaseVersion = params.RELEASE_VERSION ?: "9.0.0.0"
String suiteBuildResourcesBranch = params.SUITE_BUILD_RESOURCES_BRANCH ?: "9.0.0.0"
String suiteReleaseVersion = params.SUITE_RELEASE_VERSION ?: "9.0-QAT"
String buildHostingRoot = params.BUILD_HOSTING_ROOT ?: "/build2/artifacts/hosted"
String versionMergerVersion = params.VERSION_MERGER_VERSION ?: "1.0.7"
String mavenPublicReleaseRepoURL = params.MAVEN_PUBLIC_RELEASE_REPO_URL ?: "https://nexus3.pentaho.com/content/repositories/public-9.0-qat"
String mavenPrivateReleaseRepoURL = params.MAVEN_PRIVATE_RELEASE_REPO_URL ?: "https://nexus3.pentaho.com/content/repositories/private-9.0-qat"
String mavenPublicSnapshotRepoURL = params.MAVEN_PUBLIC_SNAPSHOT_REPO_URL ?: ""
String mavenPrivateSnapshotRepoURL = params.MAVEN_PRIVATE_SNAPSHOT_REPO_URL ?: ""
String mavenResolveRepoURL = params.MAVEN_RESOLVE_REPO_URL ?: "https://nexus3.pentaho.com/content/groups/omni"
// SP specific parameters
String previousReleaseVersion = params.PREVIOUS_RELEASE_VERSION ?: "8.2.0.0-342"
String spReleaseVersion = params.SP_RELEASE_VERSION ?: "201811"
Boolean doAutoPatch = params.DO_AUTO_PATCH ?: false


String buildJobName = "suite-release"
String releaseBuildNumber = releaseBuildNumberForJobName(buildJobName)
List passOnParameters = [string(name:"RELEASE_BUILD_NUMBER",            value:releaseBuildNumber),
                         string(name:"RELEASE_BUILD_ID",                value:env.BUILD_TIMESTAMP),
                         string(name:"RELEASE_VERSION",                 value:"${releaseVersion}"),
                         string(name:"SUITE_BUILD_RESOURCES_BRANCH",    value:"${suiteBuildResourcesBranch}"),
                         string(name:"SUITE_RELEASE_VERSION",           value:"${suiteReleaseVersion}"),
                         string(name:"JENKINS_FOLDER_NAME",             value:"${jobParentFolder}"),
                         string(name:"BUILD_ID_TAIL",                   value:"-${releaseBuildNumber}"),
                         string(name:"BUILD_HOSTING_ROOT",              value:"${buildHostingRoot}"),
                         string(name:"VERSION_MERGER_VERSION",          value:"${versionMergerVersion}"),
                         string(name:"MAVEN_PUBLIC_RELEASE_REPO_URL",   value:"${mavenPublicReleaseRepoURL}"),
                         string(name:"MAVEN_PUBLIC_SNAPSHOT_REPO_URL",  value:"${mavenPublicSnapshotRepoURL}"),
                         string(name:"MAVEN_PRIVATE_RELEASE_REPO_URL",  value:"${mavenPrivateReleaseRepoURL}"),
                         string(name:"MAVEN_PRIVATE_SNAPSHOT_REPO_URL", value:"${mavenPrivateSnapshotRepoURL}"),
                         string(name:"MAVEN_RESOLVE_REPO_URL",          value:"${mavenResolveRepoURL}"),
                         string(name:"PREVIOUS_RELEASE_VERSION",        value:"${previousReleaseVersion}"),
                         string(name:"SP_RELEASE_VERSION",              value:"${spReleaseVersion}"),
                         booleanParam(name:"DO_AUTO_PATCH",             value:doAutoPatch)]

pipeline {

  agent {
    label 'non-master'
  }

  parameters {

    booleanParam(
        name: 'NOOP',
        defaultValue: false,
        description: 'No op build (test the build config)'
    )
  }

  options {
    timestamps()
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '45', artifactNumToKeepStr: '3'))
  }

  stages {
    stage('Configure') {
      steps {
        script {
          if (params.OVERRIDE_PARAMS) {
            passOnParameters << string(name:"OVERRIDE_PARAMS",value:params.OVERRIDE_PARAMS)
          }
          echo "Passed on parameters: ${passOnParameters}"
        }
      }
    }

    stage('Build') {
      when {
        expression {
          !params.NOOP
        }
      }
      steps {
        triggerJob(buildJobName, passOnParameters)
      }
    }

    stage('Deployment') {
      when {
        expression {
          !params.NOOP
        }
      }
      steps {
        triggerJob("deployment-sculptor", passOnParameters)
      }
    }

    stage('Validations / Triggers') {
      when {
        expression {
          !params.NOOP
        }
      }
      steps {
        parallel(
          'github-commits': {
            triggerJob("engops/github-commits", passOnParameters)
          },
          'remote-ip-job-trigger': {
            triggerJob("engops/remote-ip-job-trigger", passOnParameters)
          },
          'regression-smoketest-job-trigger': {
            triggerJob("engops/regression-smoketest-job-trigger", passOnParameters)
          },
          'snapshot-checker': {
            triggerJob("snapshot-checker", passOnParameters)
          },
          'obfuscation-verifier': {
            triggerJob("obfuscation-verifier", passOnParameters)
          }
        )
      }
    }

    stage('Service Pack') {
      when {
        expression {
          params.BUILD_SERVICEPACK
        }
      }
      stages {
        stage("Aggregation Designer") {
          steps {
             triggerJob("service-pack-installers-aggregation-designer", passOnParameters)
          }
        }
        stage("Pentaho Server") {
           steps {
             triggerJob("service-pack-installers-pentaho-server", passOnParameters)
          }
        }
        stage("DI Client") {
          steps {
             triggerJob("service-pack-installers-di-client", passOnParameters)
          }
        }
        stage("Metadata Editor") {
          steps {
             triggerJob("service-pack-installers-metadata-editor", passOnParameters)
          }
        }
        stage("Report Designer") {
          steps {
             triggerJob("service-pack-installers-report-designer", passOnParameters)
          }
        }
        stage("Schema Workbench") {
          steps {
             triggerJob("service-pack-installers-schema-workbench", passOnParameters)
          }
        }
        stage("Big Data Plugin") {
          steps {
             triggerJob("service-pack-manual-big-data-plugin", passOnParameters)
          }
        }
        stage("Platform Installer Bundler") {
          steps {
             triggerJob("service-pack-platform-installer-bundler", passOnParameters)
          }
        }
      }
    }
    stage('Deployment (SP)') {
      when {
        expression {
          params.BUILD_SERVICEPACK
        }
      }
      steps {
        triggerJob("deployment-sculptor-sp", passOnParameters)
      }
    }
  }
}

void triggerJob(job, parameters) {

  script {
    def res = build(
      job: job,
      wait: true,
      propagate: false,
      parameters: parameters
    )
    if (res) {
      currentBuild.result = res.result
      if (res.result == 'FAILURE')
        throw new Exception("Job ${job} failed")
    }
  }
}

void releaseBuildNumberForJobName(jobName) {
  def job = Jenkins.instance.getItemByFullName(jobName)
  if (!job) {
    // getItemByFullName doesn't work with relative job paths, and getItem returns nothing
    def thisJobName = env.JOB_NAME
    if (thisJobName.contains("/")) {
      int index = thisJobName.lastIndexOf("/")
      def jenkinsFolderName = thisJobName.substring(0, index)
      def fullJobName = "${jenkinsFolderName}/${jobName}"
      job = Jenkins.instance.getItemByFullName(fullJobName)
    }
  }

  if (!job) {
    throw new Exception("Unknown job: ${jobName}")
  }

  return params.RELEASE_BUILD_NUMBER ?: job.nextBuildNumber
}
