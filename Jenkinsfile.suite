// This is the master top-level pipeline that triggers both the build pipeline and the downstream triggered jobs

String buildJobName = "suite-release"
String releaseBuildNumber = releaseBuildNumberForJobName(buildJobName)
List passOnParameters = [string(name:"RELEASE_BUILD_NUMBER",         value:releaseBuildNumber),
                         string(name:"RELEASE_BUILD_ID",             value:env.BUILD_TIMESTAMP),
                         string(name:"RELEASE_VERSION",              value:"9.0.0.0"),
                         string(name:"SUITE_BUILD_RESOURCES_BRANCH", value:"9.0.0.0"),
                         string(name:"SUITE_RELEASE_VERSION",        value:"9.0-QAT"),
                         string(name:"JENKINS_FOLDER_NAME",          value:"9.0"),
                         string(name:"SCM_URL",                      value:params.SCM_URL),
                         string(name:"SCM_BRANCH",                   value:params.SCM_BRANCH),
                         string(name:"BUILD_ID_TAIL",                value:"-${releaseBuildNumber}"),
                         string(name:"BUILD_HOSTING_ROOT",           value:"/build2/artifacts/hosted")]

pipeline {

  agent {
    label 'non-master'
  }

  parameters {

    booleanParam(
        name: 'NOOP',
        defaultValue: false,
        description: 'No op build (test the build config)'
    )
  }

  options {
    timestamps()
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '45', artifactNumToKeepStr: '3'))
  }

  stages {
    stage('Configure') {
      steps {
        script {
          if (params.OVERRIDE_PARAMS) {
            passOnParameters << string(name:"OVERRIDE_PARAMS",value:params.OVERRIDE_PARAMS)
          }
          echo "Passed on parameters: ${passOnParameters}"
        }
      }
    }

    stage('Build') {
      when {
        expression {
          !params.NOOP
        }
      }
      steps {
        triggerJob(buildJobName, passOnParameters)
      }
    }

    stage('Deployment') {
      when {
        expression {
          !params.NOOP
        }
      }
      steps {
        triggerJob("deployment-sculptor", passOnParameters)
      }
    }

    stage('Validations / Triggers') {
      when {
        expression {
          !params.NOOP
        }
      }
      steps {
        parallel(
          'github-commits': {
            triggerJob("engops/github-commits", passOnParameters)
          },
          'remote-ip-job-trigger': {
            triggerJob("engops/remote-ip-job-trigger", passOnParameters)
          },
          'regression-smoketest-job-trigger': {
            triggerJob("engops/regression-smoketest-job-trigger", passOnParameters)
          },
          'snapshot-checker': {
            triggerJob("snapshot-checker", passOnParameters)
          },
          'obfuscation-verifier': {
            triggerJob("obfuscation-verifier", passOnParameters)
          }
        )
      }
    }
  }
}

void triggerJob(job, parameters) {

  script {
    def res = build(
      job: job,
      wait: true,
      propagate: false,
      parameters: parameters
    )
    if (res) {
      currentBuild.result = res.result
      if (res.result == 'FAILURE')
        throw new Exception("Job ${job} failed")
    }
  }
}

void releaseBuildNumberForJobName(jobName) {
  def job = Jenkins.instance.getItemByFullName(jobName)
  if (!job) {
    // getItemByFullName doesn't work with relative job paths, and getItem returns nothing
    def thisJobName = env.JOB_NAME
    if (thisJobName.contains("/")) {
      int index = thisJobName.lastIndexOf("/")
      def jenkinsFolderName = thisJobName.substring(0, index)
      def fullJobName = "${jenkinsFolderName}/${jobName}"
      job = Jenkins.instance.getItemByFullName(fullJobName)
    }
  }

  if (!job) {
    throw new Exception("Unknown job: ${jobName}")
  }

  return params.RELEASE_BUILD_NUMBER ?: job.nextBuildNumber
}
