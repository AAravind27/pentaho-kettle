# Original: https://github.com/jenkinsci/docker/blob/master/Dockerfile
# Jenkins versions: https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/

# Because of the need to build this with a specific user to map the production environment
# we copied some things of the original dockerfile for the official docker image here so we can build it
# with the arguments we need. This file is a compilation of the original dockerfile and ours.

FROM openjdk:8-jdk-slim

ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=1000
ARG http_port=8080
ARG agent_port=50000
ARG git_url=https://raw.githubusercontent.com/jenkinsci/docker/master

ARG JENKINS_VERSION=2.150.2
ARG JENKINS_HOME=/var/jenkins_home
ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war
ARG TINI_VERSION=v0.16.1

ENV JENKINS_VERSION ${JENKINS_VERSION}
ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log
ENV JENKINS_UC https://updates.jenkins.io
ENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental
ENV JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals

ENV JENKINS_HOME $JENKINS_HOME
ENV JENKINS_SLAVE_AGENT_PORT ${agent_port}

ENV LANG C.UTF-8

# docker-cli and some other tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    git \
    net-tools \
    wget \
    unzip \
    bzip2 \
    xz-utils \
    apt-transport-https \
    ca-certificates \
    gnupg2 \
    software-properties-common \
  && rm -rf /var/lib/apt/lists/*

RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
RUN add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/debian \
    $(lsb_release -cs) \
    stable"

RUN apt-get update && apt-get install -y --no-install-recommends \
    docker-ce-cli \
  && rm -rf /var/lib/apt/lists/*

# Jenkins is run with user `jenkins`, uid = 1000
# If you bind mount a volume from the host or a data container,
# ensure you use the same uid
RUN mkdir -p $JENKINS_HOME \
  && chown ${uid}:${gid} $JENKINS_HOME \
  && groupadd -o -g ${gid} ${group} \
  && useradd -o -d "$JENKINS_HOME" -u ${uid} -g ${gid} -m -s /bin/bash ${user}

# Jenkins home directory is a volume, so configuration and build history
# can be persisted and survive image upgrades
VOLUME $JENKINS_HOME

# `/usr/share/jenkins/ref/` contains all reference configuration we want
# to set on a fresh new installation. Use it to bundle additional plugins
# or config file with your custom jenkins Docker image.
RUN mkdir -p /usr/share/jenkins/ref/init.groovy.d

# Use tini as subreaper in Docker container to adopt zombie processes
ADD $git_url/tini_pub.gpg ${JENKINS_HOME}/tini_pub.gpg
RUN curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture) -o /sbin/tini \
  && curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture).asc -o /sbin/tini.asc \
  && gpg --no-tty --import ${JENKINS_HOME}/tini_pub.gpg \
  && gpg --verify /sbin/tini.asc \
  && rm -rf /sbin/tini.asc /root/.gnupg \
  && chmod +x /sbin/tini

ADD $git_url/init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy

# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum
# see https://github.com/docker/docker/issues/8331
RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war

RUN chown -R ${user} "$JENKINS_HOME" /usr/share/jenkins/ref

# for main web interface:
EXPOSE ${http_port}

# will be used by attached slave agents:
EXPOSE ${agent_port}

ADD $git_url/jenkins-support /usr/local/bin/jenkins-support
ADD $git_url/jenkins.sh /usr/local/bin/jenkins.sh
ADD $git_url/tini-shim.sh /bin/tini
ADD $git_url/plugins.sh /usr/local/bin/plugins.sh
ADD $git_url/install-plugins.sh /usr/local/bin/install-plugins.sh

RUN chmod +rx \
 /usr/local/bin/jenkins-support \
 /usr/local/bin/jenkins.sh \
 /bin/tini \
 /usr/local/bin/plugins.sh \
 /usr/local/bin/install-plugins.sh

USER ${user}
ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/jenkins.sh"]

#################################
### Hitachi Vantara additions ###
#################################

ENV SCM_CREDENTIALS_ID github-buildguy
ENV DEPLOY_CREDENTIALS_ID nexus-buildguy
ENV DEFAULT_JOB_NAME pipeline
ENV DEFAULT_JOB_REPO https://github.com/pentaho/jenkins-pipelines.git
ENV DEFAULT_JOB_BRANCH master
ENV SHARED_LIBRARIES_NAME jenkins-shared-libraries
ENV SHARED_LIBRARIES_REPO https://github.com/pentaho/jenkins-shared-libraries.git
ENV SHARED_LIBRARIES_BRANCH master
ENV ROOT_URL http://0.0.0.0:8080

ENV JAVA_OPTS -Djenkins.install.runSetupWizard=false

COPY install-custom-plugins.sh /usr/local/bin/install-custom-plugins.sh
COPY plugins.txt /usr/share/jenkins/ref/plugins.txt
RUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt
RUN /usr/local/bin/install-custom-plugins.sh

COPY bootstrap /usr/share/jenkins/ref/init.groovy.d/

HEALTHCHECK --interval=30s --timeout=10s --retries=3 CMD curl --fail $ROOT_URL || exit 1


